import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.uselesssolutions.Main;

import java.util.Map;
import java.util.Properties;

class MainTest {
    @Test
    @DisplayName("Validate Argument Parsing")
    void testArgParse() {
        {
            final Properties validProp1 = new Properties();
            validProp1.setProperty("key", "value");
            final Properties validGen1 = Main.argsToProperties(new String[]{"-key", "value"});
            Assertions.assertTrue(propertiesMatch(validGen1, validProp1), validGen1::toString);
        }

        {
            final Properties validProp2 = new Properties();
            validProp2.setProperty("key1", "value1");
            validProp2.setProperty("key2", "value2");
            final Properties validGen2 = Main.argsToProperties(new String[]{"-key1", "value1", "-key2", "value2"});
            Assertions.assertTrue(propertiesMatch(validGen2, validProp2), validGen2::toString);
        }

        {
            final Properties invalidProp1 = new Properties();
            invalidProp1.setProperty("key1", "value1");
            final Properties invalidGen1 = Main.argsToProperties(new String[]{"key1", "value1"});
            Assertions.assertFalse(propertiesMatch(invalidGen1, invalidProp1), invalidGen1::toString);
        }

        {
            final Properties invalidProp2 = new Properties();
            invalidProp2.setProperty("key1", "value1");
            invalidProp2.setProperty("key2", "value2");
            final Properties invalidGen2 = Main.argsToProperties(new String[]{"key1", "value1", "key2", "value2"});
            Assertions.assertFalse(propertiesMatch(invalidGen2, invalidProp2), invalidGen2::toString);
        }

        {
            final Properties invalidProp3 = new Properties();
            invalidProp3.setProperty("key1", "value1");
            final Properties invalidGen3 = Main.argsToProperties(new String[]{"-key1", "value1", "-key2", "value2"});
            Assertions.assertFalse(propertiesMatch(invalidGen3, invalidProp3), invalidGen3::toString);
        }

        {
            final Properties invalidProp4 = new Properties();
            invalidProp4.setProperty("key1", "value1");
            invalidProp4.setProperty("key2", "value2");
            invalidProp4.setProperty("key3", "value3");
            invalidProp4.setProperty("key4", "value4");
            invalidProp4.setProperty("key5", "");
            final Properties invalidGen4 = Main.argsToProperties(new String[]{"-key1", "value1", "-key2", "value2", "-key3", "value3", "key4", "value4", "-key5"});
            Assertions.assertFalse(propertiesMatch(invalidGen4, invalidProp4), invalidGen4::toString);
        }
    }

    /**
     * @param generatedProps Properties generated by code
     * @param expectedProps Expected values the generated properties should be
     * @return True if generatedProps and expectedProps store the exact same values, otherwise false
     */
    boolean propertiesMatch(Properties generatedProps, Properties expectedProps) {
        // If sizes don't match then properties don't either
        if (generatedProps.size() != expectedProps.size()) {
            return false;
        }

        for (Map.Entry<Object, Object> genEntry : generatedProps.entrySet()) {
            Object genValue = genEntry.getValue();
            Object expectedValue = expectedProps.get(genEntry.getKey());
            // Check if generated values equals expected values
            if (!genValue.equals(expectedValue)) return false;
        }
        return true;
    }
}
